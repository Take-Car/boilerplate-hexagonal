version: "3.8"

services:

  traefik:
    image: traefik:v2.4.7
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik=true"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./services/traefik/dynamic_conf.yaml:/etc/traefik/dynamic_conf.yaml:ro
      - ./services/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./certs:/etc/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: ./apps/web/.env
    command: yarn serve
    volumes:
      - ./apps/web:/opt/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node.tls=true"
      - "traefik.http.routers.node.rule=Host(`frontend.app.localhost`)"
      - "traefik.http.services.node.loadbalancer.server.port=80"

  api:
    image: nginx:1.20.2-alpine
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.rule=Host(`api.app.localhost`)"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
    volumes:
      - ./services/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./apps/api:/opt/app:ro
      - composer:/.composer
    depends_on:
      - php

  docusaurus:
    build:
      context: ./apps/docusaurus
      dockerfile: Dockerfile
    command: yarn start
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docusaurus.tls=true"
      - "traefik.http.routers.docusaurus.rule=Host(`docs.app.localhost`)"
      - "traefik.http.services.docusaurus.loadbalancer.server.port=3000"
    volumes:
      - ./apps/docusaurus:/opt/app
  
  php:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./apps/api:/app
      - ./apps/api:/opt/app
      - composer:/.composer
    depends_on:
      database:
        condition: service_healthy

  database:
    image: mysql:${MYSQL_VERSION}
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
    volumes:
      - mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

# Data persistence
volumes:
  mysql:    # database
  composer: # composer cache
  yarn:     # yarn cache
